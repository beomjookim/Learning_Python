21.03.25.   [p272 ~ p309]-----------------------------------------------------------------------------------------------------------------------------------------------------------
Chapter 06. Exception Handling

● 구문 오류와 예외

예상치 못한 오류를 만나면 프로그램은 임기응변하지 못하고 바로 죽어버린다.
프로그래밍 언어의 오류는 두 가지가 존재:   1. 프로그램 실행 전에 발생(syntax error)   2. 프로그램 실행 중에 발생(exception / runtime error)

C++에서는 1번을 컴파일 에러 2번을 런타임 에러라고 부르기도 하는데, 파이썬에서는 컴파일 과정이 없으므로 그냥 syntax error.

1. Syntax Error는 해결하지 않으면 프로그램 실행 자체가 안 됨. 코딩 문제로 치면 테스트 케이스 돌려보지도 못함.
2. Exception 또는 Runtime Error는 프로그램이 실행은 되는데 실행 중에 발생하는 오류.

기본적인 예외 처리(구문 오류는 프로그램이 실행조차 안 되니까 예외처리 방법으로 처리할 수 없음):  1. 조건문 사용  2. try구문 사용

try:
	 예외가 발생할 가능성이 있는 코드
except:
	 예외가 발생했을 때 실행할 코드
	 
1의 조건문 사용은 기본적인 내용이고, try-except만 잘 외워두면 되겠다. 근데 사실 이것도 if-else로 대체되는 구문이라, 실전에서 이를 쓸 일은 여태까지는 거의 없었다.
try-except 구문에 pass 키워드를 사용 가능한데, 그냥 try에서 예외가 발견됐는데 trivial하다 하면 그냥 except에 pass를 넣어서 진행해주는것.
try-except-else 구문에서 예외가 발생 안 했을 때 사후처리 해주는 코드를 else에 넣는 것이다.
try-except-else-finally 구문에서 앞에서 사후처리되든 말든 무조건 실행할 코드를 finally에 넣는 것이다.

과연 이 try 구문이 if-else와 비교해서 큰 메리트가 있을까? 그렇지 않다면 범용성이 뛰어난 if-else를 사용해서 코드를 일관되게 유지하는 것도 나쁘지 않다.

위에서 언급한 finally는 꽤 유용하게 쓰일 수도 있을 것 같은 것이, 위력적인 영향력을 가지고 있기 때문이다.
예를 들어 try 구문에서 문제가 없이 진행된 후 return을 해서 현재의 def를 빠져나가더라도, 밑의 finally 구문은 무조건적으로 실행을 하고 나간다.
마찬가지로 while 내부의 try 구문에서 break를 사용하여 중도에 나가게 되어도 밑의 finally 구문을 무조건적으로 실행한다. 한 마디로 finally가 존재하면 언젠가는 실행을 해야한다는 것.
그래서 이 finally는 파일 닫기(파일을 열고 뭔가를 진행했으면 뭘 어떻게 진행했든 상관없이 닫아줘야 하니)를 할 때 유용하게 잘 사용된다.

● 예외 고급

try:
	 예외가 발생할 가능성이 있는 구문
except 예외의 종류 as 예외 객체를 활용할 변수 이름:	 <-- 이 부분만 좀 색다름. 예외의 종류와 as, 그리고 예외 객체를 다룬다.
	 예외가 발생했을 때 실행할 구문

1. 예외 객체: 프로그래밍 언어는 예외가 발생하면 예외와 관련된 정보가 생긴다. 이 정보는 예외 객체 exception object에 저장된다.
			 예외의 종류가 뭔지 불확실할 경우, '모든 예외의 어머니'라고 불리는 Exception을 사용한다. like, except Exception as something: something은 내가 임의로 만든 변수
			 
2. 예외 구분하기: 예외 객체를 사용하면 except 구문을 if 조건문처럼 사용해서 예외를 구분할 수 있음.

try:
	 예외 발생 가능성 있는 구문
except 예외의 종류1:
	 예외1이 발생했을 때 실행할 구문
except 예외의 종류2:
	 예외2이 발생했을 때 실행할 구문
except 예외의 종류3:
	 예외3이 발생했을 때 실행할 구문

예외의 종류로는 자료형이 다를 때 발생하는 ValueError나, 리스트의 길이를 넘는 인덱스를 입력했을 때 발생하는 IndexError 등이 있다.
아까도 언급했지만, 만약 Error의 종류를 세분화한 것들 중에 걸리는 게 없다면, 바로 마지막 except에 Exception을 넣어서 마지막으로 걸러주면 된다.


★ 큰 규모의 프로그램을 개발할 때는, '예외 처리로 떡칠을 한다'고 표현할 정도로 예외 처리를 많이 사용한다고 한다. 프로그램이 강제 종료되는 것을 막기 위해 예외를 꼭 처리해야 함.
그런데 프로그램의 어떤 부분에서 문제가 발생하는데 어딘지 모르겠거나 문제가 발생할 여지가 있는데 그걸 방지할 수가 없는 상태다 하면, 강제로 예외를 발생시키면 된다.
또한 코드를 개발하는 도중에 저장하고 나가야 되는 상황이면 아직 마무리되지 않은 부분이 문제를 일으키므로 거기에 일부러 문제가 발생되게끔 하는 것이다.

● raise 구문
raise 예외객체 <- 예외를 강제로 발생시키는 프로그램

예를 들어,

number = input("정수 입력")
number = int(number)
if number > 0:
	# 코드 작성 아직 못한 상태
	raise NotImplementedError
else:
	# 코드 작성 아직 못한 상태
	raise NotImplementedError

이런 식으로 일부러 예외가 발생할 상황에 있는 코드를 선제적으로 확인, 예외 처리해주는 것이다. 예외 처리를 해준 후 추가로 메시지를 출력한다던가 하고 싶다면 예외 클래스를 사용해야 함.

<챕터6 끝>

오늘은 이론적 내용은 여기까지. 관련된 내용을 추가로 찾아보고 문제 풀이를 통해 체화하면서 강화 학습.
