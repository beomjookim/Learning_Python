나도코딩의 파이썬 강의를 토대로 작성한 자료.
Disclaimer: 가독성을 높이려기보다는 개인화에 집중하였으므로 타인이 내용을 이해하기에는 최적이 아닐 수 있다.
https://www.youtube.com/watch?v=kWiCuklohdY

# Python을 C++와 비교하면서 공부하는 것이 가장 효율적이라는 결론.
# 대동소이.

1. 주석:
한 줄 주석       //         #           
여러 줄 주석     /* */      """/'''


2. 자료형:
int bool string char 다 있지만 사용법이 약간 다름.
int animal = 4;     는 animal = 4   로 표현. 자료형 명시 X ; 안 붙이고.
bool is_adult() {if(age>=3) true}   는 걍 is_adult = age >=3    으로 표현.

print ("우리 집 동물 종류는 " + animal + "가지입니다.")
에서 위 처럼 표현하면 안 됨. animal이 string이 아니므로 str(animal) 꼭 해줘야.
print ("우리 집 동물 종류는 " + str(animal) + "가지입니다.")
그리고, + 대신 , 사용 가능. 이때는 str function 없이 즉,
print ("우리 집 동물 종류는 " , animal , "가지입니다.")
도 똑같이 유효한 표현.

cast는, C++의 (int) s 와 달리 걍 int(s) 식으로 해준다.

3. 연산자와 수식:
제곱은 x**y. pow도 똑같이 있다. abs,  max, min, round 연산자도 있다. library 없이 걍 쓰면 됨.
not 연산자도 있다. 그냥 1 != 3 은 true인데 not(1 != 3)은 false임.
and 연산자도 있다. C++의 && 와 같다. or 연산자도 있다. C++의 || 와 같다.
몫은 5//3 이렇게. C++에서는 걍 /해주면 되는데. 여기선 5/3해주면 1.6666의 float값이 나온다. 신-기

4. library 사용:
from math import *   해석하면 #include <math>. 물론 c++에서는 cmath 사용.
floor, ceil, sqrt 는 c++과 동일하게 사용.
from random import *   난수. 
print(random())   0.0 ~ 1.0 사이의 임의의 값 출력.

5 -1. 문자열:
기본적으로 ''와 "" 사이의 차이가 없다 그리고 아까 주석이라 했던 """도 string으로 인정!!

5 -2. 슬라이싱:
sentence = "blah blah"
print(sentence[3:5])  인덱스 기준 3 이상 5 미만 글자 다 가져옴.
print(sentence[-4:])  인덱스 기준 뒤에서 4번째부터 끝까지.

5 -3. 문자열 처리 함수:
print(sentence.lower())     tolower와 같음.
print(sentence.upper())     toupper와 같음.
print(sentence[0].isupper)
print(len(sentence))        length.sentence와 같음.
print(sentence.replace("abc", "def"))   C++의  replace 함수는 노답.
index = sentence.index("n")   sentence에서 n의 인덱스 찾기. 
    근데 n 첫 번째 거 말고 뒤에 거 원하면 sentence.index("n", index +1)
뒤의 index + 1 은 시작점.
find도 index와 똑같은 녀석. 근데 find는 찾는 게 없으면 -1, index는 에러 뜸.
sentence.count("n")은 n의 개수 반환.

5 -4. 문자열 포맷
print("a" + "b")        ab 출력.   모두 str로 형 변환 해줘야 함.
print ("a", "b")        a b 출력.  굳이 형변환해주지 않아도 된다는 것.
print("나는 %d살입니다." %20)             %d는 int 꼴
print("나는 %s을 좋아해요." %"파이썬")     %s는 string 꼴
print("Apple은 %c로 시작해요." % "A")     %c는 char 꼴
# %s는 string뿐 아니라 만능, 그 어떤 걸 넣어도 됨.
print("나는 %s색과 %s색을 좋아해요" %("파란", "빨간"))

print("나는 {}살입니다." .format(20))
print("나는 {}색과 {}색을 좋아해요" .format("파란", "빨간"))
print("나는 {1}색과 {0}색을 좋아해요" .format("파란", "빨간"))    #중괄호 안의 숫자는 뒤의 format 상의 순서의 element.
print("나는{age}살이며, {color}색을 좋아해요" .format(age = 20, color="빨간"))   #중괄호 속의 변수를 부름.

\n은 줄바꿈. \" \"은 그대로 출력하기. \\는 문장 내에서 \를 출력. \r은 커서를 앞으로 이동. \b는 백스페이스. \t는 탭.

6 -1. 리스트(= 업그레이드 버전 배열)
subway = [123, 234, 345]
단순히 print(subway) 를 컴파일하면 [123, 234, 345] 이 출력됨.
index       print(subway.index(234)]) 를 하면 해당 인덱스 1이 출력됨.
append      print(subway.append(456)) 를 하면 그냥 vector.push_back(456)과 같다.
pop         subway.pop()은 마지막 녀석 제거.
count       subway.count(123)은 123이 몇 번 나오는지.
sort        subway.sort()
reverse     subway.reverse()
clear       subway.clear()
extend      subway.extend(subday) 하면 + 됨.
    ☆ 레전드급으로 신나는 함수는 insert 함수다. 분명 배열은 중간에 삽입이 안 되는데
insert      subway.insert(1, 111) 해주면 기존의 123과 234 사이에 111을 넣어준다. 황-홀.
    ☆ 그리고 또 하나의 레전드. 여러 개의 자료형을 하나의 리스트에 함께 저장 가능하다.
users = range(1,21) 이렇게 range를 해주면 크기 설정 가능. 근데 이건 type이 range. list로 바꿔줘야 함.
users = list(users) 해주면 됨~

6 -2. 튜플
리스트의 하위호환 버전. 한 번 만들어두면 값을 추가, 변경, 삭제하는 것은 불가능하다. 
그렇지만 두 개의 장점이 있다. 1. 속도는 리스트보다 빠르다. 2. 한 번에 여러 변수 정의 가능.
menu = ("돈까스", "치즈까스")                              (나이, 이름, 취미) = (24, 김범주, 축구)

6 -3. set
중복을 허용하지 않고, 순서는 따로 없다.
my_set = {1,2,3,3,3} 은 자동적으로 {1,2,3}으로 바뀐다.
A & B 는 곧 A.intersection(B)
A | B 는 곧 A.union(B)
A - B 는 곧 A.difference(B)
그리고 add(), remove() 등의 STL 사용 가능.

6 -4. 자료구조
위에서 본 것처럼,
튜플은 ()로, 리스트는 []로, 세트는{}로 표현을 하는데, 이미 다른 자료구조로 정의를 한 후에도 다른 자료구조로 바꿀 수 있다.
menu = {a, b, c}         list(menu)      하면 세트에서 리스트로 바뀜.

7. 분기
