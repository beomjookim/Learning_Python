# Python을 C++와 비교하면서 공부하는 것이 가장 효율적이라는 결론.
# 대동소이.

1. 주석:
한 줄 주석       //         #           
여러 줄 주석     /* */      """/'''


2. 자료형:
int bool string char 다 있지만 사용법이 약간 다름.
int animal = 4;     는 animal = 4   로 표현. 자료형 명시 X ; 안 붙이고.
bool is_adult() {if(age>=3) true}   는 걍 is_adult = age >=3    으로 표현.

print ("우리 집 동물 종류는 " + animal + "가지입니다.")
에서 위 처럼 표현하면 안 됨. animal이 string이 아니므로 str(animal) 꼭 해줘야.
print ("우리 집 동물 종류는 " + str(animal) + "가지입니다.")
그리고, + 대신 , 사용 가능. 이때는 str function 없이 즉,
print ("우리 집 동물 종류는 " , animal , "가지입니다.")
도 똑같이 유효한 표현.

cast는, C++의 (int) s 와 달리 걍 int(s) 식으로 해준다.

3. 연산자와 수식:
제곱은 x**y. pow도 똑같이 있다. 다만 library 불필요.
abs,  max, min, round 연산자도 있다. 역시나 library 없이 걍 쓰면 됨.
not 연산자도 있다. 그냥 1 != 3 은 true인데 not(1 != 3)은 false임.
and 연산자도 있다. 또는 &. C++의 && 와 같다. 헛갈릴 수 있다.
or 연산자도 있다. 또는 |. C++의 || 와 같다. 또한 헛갈릴 수 있다.
몫은 5//3 이렇게. C++에서는 걍 /해주면 되는데. 신-기

4. library 사용:
from math import *   해석하면 #include <math>. 물론 c++에서는 cmath 사용.
flor, ceil, sqrt 는 c++과 동일하게 사용.
from random import *   난수. 
print(random())   0.0 ~ 1.0 사이의 임의의 값 출력.

5 -1. 문자열:
기본적으로 ''와 "" 사이의 차이가 없다 그리고 아까 주석이라 했던 """도 string으로 인정!!

5 -2. 슬라이싱:
sentence = "blah blah"
print(sentence[3:5])  인덱스 기준 3 이상 5 미만 글자 다 가져옴.
print(sentence[-4:])  인덱스 기준 뒤에서 4번째부터 끝까지.

5 -3. 문자열 처리 함수:
print(sentence.lower())     tolower와 같음.
print(sentence.upper())     toupper와 같음.
print(sentence[0].isupper)
print(len(sentence))        length.python과 같음.
print(sentence.replace("abc", "def"))   C++의  replace 함수는 노답.
index = sentence.index("n")   sentence에서 n의 인덱스 찾기. 
    근데 n 첫 번째 거 말고 뒤에 거 원하면 sentence.index("n", index +1)
뒤의 index + 1 은 시작점.
find도 index와 똑같은 녀석. 근데 find는 찾는 게 없으면 -1, index는 에러 뜸.
sentence.count("n")은 n의 개수 반환.

5 -4. /// 4-4부터 시작.
'''
