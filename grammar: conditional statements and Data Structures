21.03.23.   [p106 ~ p]-----------------------------------------------------------------------------------------------------------------------------------------------------------
Chapter 03. CONDITIONAL STATEMENTS

● -1. if statement
다른 것들은 C++과 대동소이하지만, 범위를 적용할 때 10 < x && x < 30 이렇게 해줬던 것과는 달리 10 < x < 30으로 바로 작성해줘도 된다.
Logical Operator: NOT, OR, AND 는 각각 !, ||, &&에 대응된다. 그냥 기호를 사용 자체를 하지 않는 것 같다.

if statement도 C++과 다르다.
if bool statement:
OOOOstatement if true
OOOOstatement if true   // tab을 사용하려 했는데 이건 8 spaces와 같아서 사용 불가. 보통 저 OOOO의 자리에는 4 spaces가 들어가야 한다.
                        // IDLE이나 VS 같은 개발 전용 에디터에서는 TAB 키를 자동으로 4개짜리로 만들어 뒀다. soft tab 기능. 
            ...
의 꼴을 가진다.

line by line의 interactive shell에서 if는 여러 줄을 필요로 하므로 엔터키를 누르면 자동으로 다음 줄의 프롬프트 위치에 ...가 나타난다. 그 위치로부터 1 tab 후에 실행 문장을 입력하면 됨.

날짜/시간 활용하기
import datetime         // 나중에 배우겠지만, import 모듈 하는 방법과 from 모듈 import 필요한 함수 하는 방법이 있다. just so you know...
now = datetime.datetime.now() 를 해주고 나서 필요에 따라
now.year now.month now.day now.hour now.minute now.second 이렇게 now 속의 변수들을 사용할 수 있다.
쉽게 출력하려면 기존의 format 함수를 활용하여,
print("{}년 {}월 {}일 {}시 {}분").format(now.year, now.month, now.day, now.hour, now.minute) 이렇게 사용 가능.

● -2. if else statement, elif statement
if-else와 elif 구문은 위의 if 템플릿을 기반으로 활용해주면 된다. easy peasy
if else 를 사용하다가 어느 시점에 만약 아무 실행문도 없는 녀석이 등장하면 C++에서는 그냥 ;로 뒀었는데 여기서는 pass를 사용해서 가독성을 높인다. 아무것도 없으면 IndentationError 뜬다.


Chapter 04. DATA STRUCTRES & LOOPS

● -1. Data Structures: LIST(= 업그레이드 버전 배열)
subway = [123, 234, 345]
단순히 print(subway) 를 컴파일하면 [123, 234, 345] 이 출력됨.
index       print(subway.index(234)) 를 하면 해당 인덱스 1이 출력됨                 <---- 상당히 좋은 기능이다. C++에서는 이 기능을 쓰기 위해서는 Hash를 써야하는 귀찮음이 있다.
append      print(subway.append(456)) 를 하면 그냥 vector.push_back(456)과 같다.
pop         subway.pop()은 마지막 녀석 제거, (인덱스)하면 해당 녀석 제거.
del         del. 리스트명 [인덱스]
remove      리스트.remove(값)
count       subway.count(123)은 123이 몇 번 나오는지.
sort        subway.sort()
reverse     subway.reverse()
clear       subway.clear()  모두 제거!
extend      subway.extend(plus_statement) 하면 + 됨.
    ☆ 레전드급으로 신나는 함수는 insert 함수다. 분명 배열은 중간에 삽입이 안 되는데
insert      subway.insert(1, 111) 해주면 기존의 123과 234 사이에 111을 넣어준다. 황-홀.      <--- 위치, 성분 순서임을 간과하지 말자.
    ☆ 그리고 또 하나의 레전드. 여러 개의 자료형을 하나의 리스트에 함께 저장 가능하다.
users = range(1,21) 이렇게 range를 해주면 크기 설정 가능. 근데 이건 type이 range. list로 바꿔줘야 함.   <---- 따로 loop을 돌릴 필요 없이 type만 변경하면 list로 쓸 수 있다.
users = list(users) 해주면 됨~

in/ not in 연산자: 값 in 리스트 꼴 혹은 값 not in 리스트 꼴. 리스트 내부에 해당 값이 있는지 여부를 판단하는 연산.

● -2. TUPLE
리스트의 하위호환 버전. 한 번 만들어두면 값을 추가, 변경, 삭제하는 것은 불가능하다. 
그렇지만 두 개의 장점이 있다.   1. 속도가 리스트보다 빠르다.     2. 한 번에 자료형이 서로 다른 여러 개의 변수 정의 가능.
                                menu = ("돈까스", "치즈까스")   (나이, 이름, 취미) = (24, 김범주, 축구)

● -3. SET
중복을 허용하지 않고, 순서는 따로 없다.                 <---- C++의 set과는 다른 것이, 중복을 허용하지 않는 것까지는 같으나 정렬이 안 된다는 것이 중요한 포인트이다.
my_set = {1,2,3,3,3} 은 자동적으로 {1,2,3}으로 바뀐다.
A & B 는 곧 A.intersection(B)
A | B 는 곧 A.union(B)
A - B 는 곧 A.difference(B)
그리고 add(), remove() 등의 STL 사용 가능.

● -4. OVERALL
위에서 본 것처럼,
튜플은 ()로, 리스트는 []로, 세트는 {}로 표현을 하는데, 이미 다른 자료구조로 정의를 한 후에도 다른 자료구조로 바꿀 수 있다.
menu = {a, b, c}         list(menu)      하면 세트에서 리스트로 바뀜.

● 딕셔너리와 반복문
리스트가 '인덱스를 기반으로 값을 저장하는 것'이라면 딕셔너리는 '키를 기반으로 값을 저장하는 것'이라고 할 수 있다.
{"키A" : 10, "키B" : 20, ...} 이런 식으로. 키는 문자열, 숫자, 불리언 모두 가능하지만 보통 문자열을 사용한다. 
딕셔너리를 생성할 때는 {}를 사용하지만, 만들어진 딕셔너리에서 값을 불러올 때는 []을 사용한다. 마치 리스트에서 인덱스를 사용하는 것과 유사하게. 헛갈릴 수 있으니 주의하자.
    ☆ 그리고 계속 반복적으로 나오지만, 리스트를 비롯한 자료구조들은 서로 다른데도 불구하고 결과론적으로 혼용되어 사용될 수 있다. 물론 2D로 사용도 할 수 있다.
이미 만들어진 딕셔너리에 새로운 키를 넣고 싶으면 dictionary["price"] = 5000 이런 식으로 넣으면 된다.
제거 역시 del 키워드로 del dictionary["ingredient"] 이렇게 해주면 된다.

딕셔너리 내부에 키가 있는지 확신하는 방법은,
1. if - in 키워드를 써서 if key in dictionary: print 해주는 방법이 있고,
2. get() 함수를 써서 None을 따주는 방법이 있다.

● for 반복문
for i in range(100): 
    print("출력")                 <-- 또 다른 C++과의 큰 차이: 공백을 주의해야 함. C++은 프로그래밍 자체의 순서가 중요했지, 사이에 여백이 있는지 여부는 중요하지 않다.

● range 자료형
1. range(A)     0부터 A-1까지의 정수로 범위를 만듦, 공차는 1
2. range(A,B)   A부터 B-1까지의 정수로 범위를 만듦, 공차는 1
3. range(A,B,C) A부터 B-1까지의 정수로 범위를 만듦, 공차는 C
-> 범위의 우측 끝값은 포함이 안 된다는 것을 명심.

for loop에도 사용이 된다.
for i in range(blah):
    print(str(i) + " = 반복 변수") 처럼!
역순은 위의 3번 내용을 활용하던가, reversed(range(5)) 이런 식으로 사용해줘도 된다.

● while 반복문
while bool_expression:
    do_expression

● do while 반복문
do:
    task() 
while condition

break와 continue 키워드: break 키워드는 반복문을 벗어날 때 사용하면 되고, continue는 현재 반복 loop을 벗어나지는 않고서 이번 턴만 넘기고 싶을 때.

그냥 반복문과 조건문은 템플릿만 외우면 그 꼴에 맞춰주면 됨.

● 문자열, 리스트, 딕셔너리와 관련된 기본 함수

reverse() vs. reversed()
reversed()는 아무것도 뒤집지 않는다. 다만 주어진 녀석을 반대 방향으로 iterate 하는 것 뿐. reversed()와 같은 표현으로는 [::-1]이 있다.
reverse()는 해당 data structure 등을 actually 뒤집는다.
아니면 그냥 reverse는 아예 기존 녀석을 갈아엎는 것이고, reversed는 제네레이터로서 일회성으로 생성되는 것이라고 생각해도 된다.

enumerate 함수도 역시 일회성으로 생성되는 제네레이터인데, 이런 일회용 제네레이터들은 자칫 잘못 썼다가 바로 삭제가 되므로 생성과 동시에 사용해야만 한다.
예를 들면 list(enumerate(example_list)) 이런 식으로. 근데 enumerate 함수는 솔직히 별로 쓸모없을 것으로 예상된다.

● 리스트 내포
array = [i*i for i in range(0, 20, 2)]  이런 식으로 표현도 가능함. 저 순서가 중요하다. i는 0, 2, 4, ... 이렇게 진행되는데 그 각각의 제곱을 array에 넣어야 하니까.
list_name = [expression for iterator in some_range]

<챕터 3, 4 끝>
