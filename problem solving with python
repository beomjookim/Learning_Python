<k번째 수>, <평균 구하기>, <예산>, <핸드폰 번호 가리기>, <x만큼 간격이 있는 n개의 숫자>, <약수의 합>, <내적>, <자릿수 더하기>, <문자열 다루기 기본>, <콜라츠 추측>, <짝수와 홀수>, 
<같은 숫자는 싫어>, <서울에서 김서방 찾기>, <자연수 뒤집어 배열로 만들기>
nothing to comment


<시저 암호>
isupper() 함수와 islower() 함수 활용해주기.
C++ 에서는 ASCII code로 따로 변환해주지 않아도 알아서 컴파일러가 변환 즉, char - 1 같은 것들이 가능하지만, python에서는 형 변환을 해 줘야 함.
char를 ASCII로 변환할 때에는 ord()를, ASCII를 char로 변환할 때에는 chr()를 사용해주면 된다.

<나누어 떨어지는 숫자 배열>
sorted(answer)과 answer.sort()의 각각의 활용을 잘 고려해서 하도록.

<문자열 내 p와 y의 개수>
s.lower().count('p')를 쓰면 엄청나게 단축됨.

<두 개 뽑아서 더하기>
기본적으로 파이썬에서 인덱싱 신경써주자.

<2016년>
리스트 두 개를 사용하여 sum 함수를 활용해주면 더할 나위 없다. sum(months[:a-1]) 뭐 이런 식으로 sum function에도 슬라이싱이 가능하다는 것도 유념.

<이상한 문자 만들기>
(조건1 실행문) if 조건1 else (else 실행문)          <- 이 템플릿 온전히 활용하자! 코드 길이 줄이는 데에 유용하게 쓰일 듯.

<두 정수 사이의 합>
sum의 슬라이싱이 가능하다고 했는데, 자세히 보니 sum은 슬라이싱이 따로 없고 사실 리스트를 슬라이싱한 녀석을 sum의 매개변수를 사용해주는 것이다.

<가운데 글자 가져오기>
쉬운 문제인데, 홀수와 짝수를 각각 2로 나누었을 때 적절한 결과를 낼 수 있는 보편적인 코드를 생각하면 더욱 좋다. 바로바로 str[(len(str)-1)//2:len(str)//2+1]

<문자열 내림차순으로 배치하기>
sorted(s) 를 사용하면 문자열인 s도 sort 가능하다. 그리고 join 함수 발견!

<정수 제곱근 판별>
math라는 모듈 안의 sqrt 함수를 사용하고 싶다면
1. import math 해주고 sqrt 할 때마다 math.sqrt 해줘도 되고 매번 써주기 귀찮으면
2. from math import sqrt 해주면 이제 sqrt에 한해서는 더 이상 math 떡칠 안 해줘도 됨.

<3진법 뒤집기> 분명 쉽게 돼야하는데... 일단 보류!

<문자열 내 마음대로 정렬하기>
놀라 나자빠질만한 답이다. 나는 처음에 자릿수 char끼리 비교해서 큰 틀에서 정렬해주고 이후에 부분적 정렬을 시도했다.
물론 이 풀이도 나쁘지 않은 풀이지만, C++ STL을 활용할 수 있는 정말 좋은 풀이가 하나 더 있다.
#include <algorithm> 내에 있는 sort 함수를 쓸 때 일반적으로 그냥 v.begin() v.end() 써 주곤 했는데, 뒤에 인자를 하나 더 붙이면
reverse나 부분 비교와 같은 기능을 추가할 수 있다. 그러니까 이 문제의 경우에는, sort(strings.begin(), strings.end(), cmp)자릿수의 비교를 먼저 해주는 기능을 추가할 수 있었다.
* 참고: sort의 iterator는 [,)다. 즉, sort 해주고 싶은 마지막 성분보다 하나 크게 범위를 잡아야 한다는 것이다.

<제일 작은 수 제거하기>

<최대공약수와 최소공배수>

<행렬의 덧셈>

<하샤드 수>

<문자열을 정수로 바꾸기>

<실패율>

<정수 내림차순으로 배치하기>

<소수 만들기>

<신규 아이디 추천>

<소수 찾기>
