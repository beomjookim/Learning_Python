21.03.24.   [p312 ~ p367]-----------------------------------------------------------------------------------------------------------------------------------------------------------

Chapter 07 (고급 01). MODULES

● 표준 모듈

기본적으로 Python은 Module 이라는 기능을 활용, 코드를 분리하고 공유함.
표준 모듈: 파이썬에 기본적으로 내장되어 있는 모듈, 외부 모듈: 그 외에 다른 사람들이 만들어 공개한 모듈.
※ 표준 모듈은 이미 만들어져있기 때문에 이름과 쓰임새, 그 내부에 있는 함수 등을 관심있게 보면 되고, 외부 모듈은 필요에 따라서 생성 및 관리하는 방법 숙지하면 됨.

import 모듈 이름: 그냥 해당 모듈 안에 있는 모든 함수 사용 가능하다. 그런데 매번 "모듈 이름.함수()" 이렇게 써줘야한다. 이게 불편하면 자주 사용하는 함수에 한해
from 모듈 이름 import 함수 이름: 이렇게 특정하면 모듈 이름 제외하고 함수이름만으로 계속 부를 수 있다. 그런데 여러 개의 함수를 조금씩만 사용한다면 그냥
import 모듈 as 사용하고 싶은 식별자: 를 사용해서 단축할 수 있다. (ex. import math as m)

기본적인 표준 모듈들: math, random, sys, os, datetime, time, urllib 등.

math 모듈: sin(x) cos(x) tan(x) ceil(x) floor(x) log(x) log2(x) log10(x) 등이 있음. 이미 아는 함수들이므로 디테일 생략.
random 모듈: 
    랜덤한 값을 생성할 때 사용하는 모듈. random()- 0.0 이상 1.0 미만의 float, uniform(min, max)- 지정 범위 사이의 float, randrange(min, max)- 지정 범위의 int, 
                                        choice(list)- list 내부의 요소를 랜덤하게 선택, shuffle(list)- list 요소들을 랜덤하게 섞음, sample(list, k=숫자)- list 요소 중 k개 뽑음.
sys 모듈:
    시스템과 관련된 정보를 가지고 있는 모듈. 명령 매개변수를 받을 때 많이 사용됨.
    명령 매개변수란? 프로그램을 실행할 때 추가로 입력하는 값들. 디테일은 나중에 다시 go over 하는 걸로.
    
os 모듈:
    운영체제와 관련된 기능을 가진 모듈. 새로운 폴더를 만들거나 폴더 내부의 파일 목록을 보는 일도 모두 os모듈을 활용해서 처리.
    함수로는 name, getcwd(), listdir(), rename(), remove() 등이 있다. 그 중 os.system은 권한이 관리되지 않은 상태에서 잘못 사용하게 되면 컴퓨터를 통째로 운명시킬 수 있는 아찔한 함수다.

datetime 모듈:
    날짜, 시간 관련된 모듈이고, 날짜 형식을 만들 때 자주 사용.
    datetime.datetime.now(), year, month, day, hour, minute, second 등의 변수들이 있다.
    
time 모듈:
    날짜와 관련된 기능과 시각과 관련된 기능은 datetime을 주로 사용하고, time은 시각에 관련된 기능에 주로 사용된다. 그 중에서도 import time의 sleep() 함수가 자주 사용된다.

urllib 모듈:
    URL을 다루는 라이브러리. URL은 네트워크의 자원이 어디에 위치하는지 확인할 때 사용하는 것. 일반적으로 주소창의 주소를 일컫기도 한다.
    즉, urllib 모듈은 인터넷 주소를 활용할 때 사용하는 라이브러리. 
    예를 들면 from urllib import request <- request도 urllib에 속한 모듈이다.
    request.urlopen("http://blahblah") 이런 식으로 처리해주면 됨.
    
● 외부 모듈

기본 개념부터. scikit-learn, tensorflow, django, flask, numpy 등은 모두 외부 모듈. 파이썬을 공부하고 나서 다음 단계는 이러한 외부 모듈을 어찌 사용하는가 하는 것.

모듈 설치: 명령 프롬프트 창에서   pip install 모듈 이름    <- pip은 모듈을 설치하거나 설치한 모듈을 제거하는 기능 등을 모두 지원.
여러 개의 외부 모듈이 있기 때문에, 내게 필요한 모듈을 찾아보고 해당 모듈을 공부하는 데에 시간을 들여야 한다.

BeautifulSoup 모듈: 파이썬의 웹 페이지 분석 모델.
Flask 모듈: Django는 다양한 기능을 제공하는 웹 개발 프레임워크, Flask는 작은 기능만을 제공하는 웹 개발 프레임워크.

라이브러리와 프레임워크:
    모듈을 살펴보면 '라이브러리'와 '프레임워크'라는 말을 많이 듣게 되는데, 최근에는 큰 구분 없이 사용하긴 하지만 엄밀히는
    제어 역전(inversion of control)이 발생하는 모듈은 프레임워크, 정상적 제어를 하는 모듈은 라이브러리(library)라고 한다.
   
    1. 라이브러리: 그냥 갖다가 쓸 수 있는, 그러니까 기존의 표준 모듈과 동일한데 다만 파이썬에서 기본적으로 제공하지는 않는 것.
    2. 프레임워크: 제어 역전이 발생(개발자가 모듈의 함수를 호출하는 것이 아닌, 개발자가 만든 함수를 모듈이 실행)하는 형태의 모듈.
    3. 데코레이터: 함수를 받아 명령을 추가한 뒤 이를 다시 함수의 형태로 반환하는 함수이다. 함수의 내부를 수정하지 않고 기능에 변화를 주고 싶을 때 사용한다.
                  일반적으로 함수의 전처리나 후처리에 대한 필요가 있을때 사용을 한다. 또한 데코레이터를 이용해, 반복을 줄이고 메소드나 함수의 책임을 확장한다.

● 모듈 만들기

파이썬으로 모듈을 만드는 방법은 아주 간단하다.

__name__=="__main__" <- 모듈 만들 때 자주 등장하는 코드인데, 의미를 확실히 파악해두자. 
                        모듈 내부에서 __name__을 출력하면 모듈의 이름을 나타낸다. 프로그램의 진입점을 entry point 혹은 main이라고 부른다.
                        그래서 모듈 내부에서 __name__을 출력하여 "__main__""인지 여부로 엔트리 포인트로 실행되는지 모듈로 실행되는지 확인을 할 수 있다.
                        
● 패키지: 모듈들을 모아둔 것.
__init__.py 파일: 패키지를 읽을 때 어떤 처리를 수행해야 하거나 패키지 내부의 모듈들을 한꺼번에 가져오고 싶을 때 패키지 내부에 이 파일을 만들어 사용.
패키지를 읽어 들일 때 이 파일을 가장 먼저 실행하기 때문에 패키지와 관련된 초기화 처리 등을 할 수 있다.

<챕터 7 >
