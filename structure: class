
21.03. 29.   [p370 ~ p413]------------------------------------------------------------------------------------------------------------------------------------------------------

Chapter 07 (고급 02). CLASSES

● class는 객체 지향 언어의 기본이 된다. 통계상 자바스크립트, 자바, 파이썬, PHP, C#, C++, C, 루비, objective C, 스칼라, 스위프트 등의 언어가 많이 쓰인다.
  그 중 C 언어를 제외하고는 모두 객체 지향 프로그래밍 언어이다. 객체를 우선으로 생각해서 프로그래밍한다는 의미. 클래스 기반의 언어는 클래스라는 것을 기반으로 객체를 만든다.

● 객체
프로그램을 만들 때는 우선 어떤 데이터를 활용하는가? 가 첫 번째 질문이 되어야 함.
학생 = {이름, 나이, 키, 몸무게, 출신 학교} 이렇게 데이터를 묶어서 저장하는 컨테이너가 바로 객체.

● 클래스
객체를 조금 더 효율적으로 생성하기 위해 만들어진 구문.
class 클래스 이름:       <- 포맷은 역시나 다른 구문들과 똑같다. 클래스 이름은 BeautifulSoup 처럼 캐멀 케이스를 써주는 게 암묵적인 룰.
    클래스 내용

recap:
object: 속성을 가질 수 있는 모든 것.   class: 객체를 쉽고 편하게 생성하기 위해 만들어진 구문.   instance: 클래스를 기반으로 생성한 객체
생성자: 클래스 이름을 가진 인스턴스를 생성할 때 쓰는 함수.   메소드: 클래스가 가진 함수들.

● 클래스의 추가적인 구문들

인스턴스가 있을 때, 이게 어떤 클래스의 인스턴스인지 확인하기
isinstance(인스턴스, 클래스)를 하면 해당 클래스가 맞으면 True 아니면 False가 나온다.
아니면 type(인스턴스) 해주면 사실 바로 해당 클래스가 반환된다. 이게 훨 편하고 명확한데 위의 방법을 우선시하는 이유는, '상속'된 클래스가 개입되면 잘못된 결과가 나오기 때문이다.

특수한 이름의 메소드
튜토리얼에서 만든 Student 클래스를 기반으로 객체를 만들고 객체 뒤에 .를 쓰면 자동완성 상에 __<이름>__() 꼴의 함수들이 잔뜩 있다는 것을 알 수 있다.

가비지 컬렉터 garbage collector: 
파이썬으로 프로그래밍을 할 때는 C나 C++ 정도로 내부에서 일어나는 일을 자세히 알 필요는 없다. 그러나 중요한 개념인 garbage collector 정도는 알고 있으면 좋다.
프로그램 내부에서 무언가를 생성하면 메모리에 올린다. 계속 만들다 보면 메모리가 가득 차버릴 것이고, 그러면 '가비지 컬렉터'가 발동. 이는 더 사용할 가능성이 없는 데이터를 메모리서 제거함

private / public: 파이썬에는 private과 public이라는 선언이 없다. 다만 이름의 꼴에 따라 각각의 성질을 지닐 수 있게 된다. 
private의 경우에는 __변수명, public의 경우에는 __변수명__, protected는 _변수명 이렇게 되는 것이다. 그런데 



